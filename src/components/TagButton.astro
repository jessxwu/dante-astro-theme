---
import type { HTMLAttributes } from 'astro/types';

type AnchorProps = HTMLAttributes<'a'> & { type?: never };
type ButtonProps = HTMLAttributes<'button'> & { href?: never };

type Props = ButtonProps | AnchorProps;

const { href, class: className, ...rest } = Astro.props;

// Define an array of 10 different color combinations
const colorSchemes = [
    { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-300', hover: 'hover:bg-red-200' },
    { bg: 'bg-blue-100', text: 'text-blue-800', border: 'border-blue-300', hover: 'hover:bg-blue-200' },
    { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-300', hover: 'hover:bg-green-200' },
    { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-300', hover: 'hover:bg-yellow-200' },
    { bg: 'bg-purple-100', text: 'text-purple-800', border: 'border-purple-300', hover: 'hover:bg-purple-200' },
    { bg: 'bg-pink-100', text: 'text-pink-800', border: 'border-pink-300', hover: 'hover:bg-pink-200' },
    { bg: 'bg-indigo-100', text: 'text-indigo-800', border: 'border-indigo-300', hover: 'hover:bg-indigo-200' },
    { bg: 'bg-gray-100', text: 'text-gray-800', border: 'border-gray-300', hover: 'hover:bg-gray-200' },
    { bg: 'bg-orange-100', text: 'text-orange-800', border: 'border-orange-300', hover: 'hover:bg-orange-200' },
    { bg: 'bg-teal-100', text: 'text-teal-800', border: 'border-teal-300', hover: 'hover:bg-teal-200' }
];

// Simple hash function to generate a number from a string
function hashCode(str: string) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
}

// Get the tag text from the slot
const tagText = Astro.slots.has('default') ? await Astro.slots.render('default') : '';

// Use the hash of the tag text to select a color scheme
const colorScheme = colorSchemes[hashCode(tagText) % colorSchemes.length];

const buttonClasses = `inline-flex items-center justify-center px-2 py-0.5 text-sm leading-tight rounded-full transition ${colorScheme.bg} ${colorScheme.text} ${colorScheme.border} ${colorScheme.hover}`;
---

{
    href ? (
        <a href={href} class:list={[buttonClasses, className]} {...rest}>
            <slot />
        </a>
    ) : (
        <button class:list={[buttonClasses, className]} {...rest}>
            <slot />
        </button>
    )
}
